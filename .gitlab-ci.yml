variables:
  CONTAINER_TEST_IMAGE: "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}"
  CONTAINER_RELEASE_IMAGE: "${CI_REGISTRY_IMAGE}:0.5.0"
  BUILDER_IMAGE: ghcr.io/nvidia/cloud-native-docs:0.4.0
  PUBLISHER_IMAGE: "${CI_REGISTRY_PUBLISHER}/publisher:3.1.0"

stages:
- .pre
- build_image
- build_docs
- publish_docs

.build_image:
  image: docker:23.0.6
  stage: .pre
  services:
    - docker:23.0.6-dind
  variables:
    GIT_STRATEGY: clone
  script:
    - apk add git
    - git fetch origin "${CI_DEFAULT_BRANCH}"
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
    - if ! docker manifest inspect "${BUILDER_IMAGE}" 2>&1 > /dev/null ; then export NEEDS_IMAGE=true ; fi
    - FILES=$(git diff --name-only "${CI_COMMIT_SHA}" "origin/${CI_DEFAULT_BRANCH}" | tr '\n' ' ')
    - if echo "${FILES}" | grep -q "deps/\|Dockerfile\|repo.toml" ; then export NEEDS_IMAGE=true ; fi
    - >
      if [[ "${NEEDS_IMAGE}" ]]; then
        docker build -t "${CONTAINER_TEST_IMAGE}" . -f docker/Dockerfile
        docker push "${CONTAINER_TEST_IMAGE}"
        echo "BUILDER_IMAGE=${CONTAINER_TEST_IMAGE}" >> build.env
      else
        echo "BUILDER_IMAGE=${BUILDER_IMAGE}" >> build.env
      fi
    - >
      if [ "${NEEDS_IMAGE}" ] && [ "${CI_COMMIT_BRANCH}" == "${CI_DEFAULT_BRANCH}" ] && [ "${CI_PIPELINE_SOURCE}" == "push" ]; then
        docker tag "${CONTAINER_TEST_IMAGE}" "${CONTAINER_RELEASE_IMAGE}"
        docker push "${CONTAINER_RELEASE_IMAGE}"
      fi
  artifacts:
    reports:
      dotenv: build.env

.build_image_rules:
  rules:
    - if: ($CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH) || $CI_PIPELINE_SOURCE == "merge_request_event"

build_image_ext:
  extends: .build_image
  rules:
    - if: $INTERNAL != null
      when: never
    - !reference [.build_image_rules, rules]

build_image_int:
  extends: .build_image
  tags:
    - os/linux
    - type/docker
  rules:
    - if: $INTERNAL == null
      when: never
    - !reference [.build_image_rules, rules]

.build:
  stage: build_docs
  image: "${BUILDER_IMAGE}"
  script:
    - ./repo docs
    - echo "BUILDER_IMAGE=${BUILDER_IMAGE}" >> build.env
  artifacts:
    name: ${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}
    paths:
      - _build
    expire_in: 4w
    reports:
      dotenv: build.env

.build_rules:
  rules:
    - if: ($CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH) || $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_REF_NAME =~ /-v[0-9]/

build_ext:
  extends: .build
  variables:
    APIURL: "${CI_API_V4_URL}/projects/${CI_MERGE_REQUEST_PROJECT_ID}/merge_requests/${CI_MERGE_REQUEST_IID}/discussions"
  after_script:
    - PROJPART=$(echo "${CI_PROJECT_PATH#$CI_PROJECT_ROOT_NAMESPACE}")
    - BASEURL=$(echo "https://${CI_PROJECT_ROOT_NAMESPACE}.${CI_PAGES_DOMAIN}/-${PROJPART}")
    - REVURL=$(echo "${BASEURL}/-/jobs/${CI_JOB_ID}/artifacts/_build/docs/review/latest/index.html")
    - MSG=$(echo "{\"body\":\"<p><b>Review HTML</b></p><p><a href=\"${REVURL}\">${REVURL}</a></p>\"}")
    - echo "${REVURL}"
    - echo "${MSG}"
    - 'curl -X POST -H "Authorization: Bearer ${MR_COMMENT}" "${APIURL}" -H "Content-Type: application/json" --data-raw "${MSG}"'
  rules:
    - if: $INTERNAL != null
      when: never
    - !reference [.build_rules, rules]

build_int:
  extends: .build
  tags:
    - os/linux
    - type/docker
  rules:
    - if: $INTERNAL == null
      when: never
    - !reference [.build_rules, rules]

pages:
  image: "${CONTAINER_RELEASE_IMAGE}"
  stage: publish_docs
  script:
    - rm -rf public
    - cp -r _build/docs/ public
  artifacts:
    paths:
      - public
    expire_in: 1 week
  dependencies:
    - build_ext
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push" && $INTERNAL != 'true'


publish_docs:
  image:
    name: "${PUBLISHER_IMAGE}"
    entrypoint: [ "" ]
  stage: publish_docs
  tags:
    - os/linux
    - type/docker
  variables:
    HTML_PATH: "_build/docs"
    FORCE_LATEST: "true"
  script:
  - echo "Pushing docs live to https://docs.nvidia.com/datacenter/cloud-native"
  - |+
    if [[ "${CI_COMMIT_REF_NAME}" =~ (.+)-v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
      export DOCSET="${BASH_REMATCH[1]}"
      export VERSION="${BASH_REMATCH[2]}"
    fi
  - |+
    if [ -z "${DOCSET}" ] || [ -z "${VERSION}" ]; then
      echo "Failed to determine the docset or version."
      exit 1
    fi
  - |+
    if [[ "${CI_COMMIT_MESSAGE}" =~ $'\n/not-latest\n' ]]; then
      export FORCE_LATEST=false
    fi
  - echo "Publishing docs for ${DOCSET} and version ${VERSION}"
  - pushd "${HTML_PATH}/${DOCSET}/latest"
  - deploy_s3.sh --archive "${DOCSET}" "${VERSION}"
  - |+
    if [ "true" == "${FORCE_LATEST}" ]; then
      deploy_s3.sh --latest "${DOCSET}"
    fi
  - deploy_s3.sh --flush "${DOCSET}"
  dependencies:
    - build_int
  rules:
    - if: $CI_COMMIT_TAG =~ /-v[0-9]/ && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "web" ) && $INTERNAL
