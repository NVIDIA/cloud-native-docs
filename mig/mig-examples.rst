.. Date: May 11 2021
.. Author: pramarao

.. headings (h1/h2/h3/h4/h5) are # * - =

.. _mig-examples:


Running Sample CUDA Workloads
------------------------------

CUDA VectorAdd
================

Let's run a simple CUDA sample, in this case ``vectorAdd`` by requesting a GPU resource as you would 
normally do in Kubernetes. In this case, Kubernetes will schedule the pod on a single MIG device and 
we use a ``nodeSelector`` to direct the pod to be scheduled on the node with the MIG devices. 

.. code-block:: console

    $ cat << EOF | kubectl create -f -
    apiVersion: v1
    kind: Pod
    metadata:
      name: cuda-vectoradd
    spec:
      restartPolicy: OnFailure
      containers:
      - name: vectoradd
        image: nvidia/samples:vectoradd-cuda11.2.1
        resources:
          limits:
            nvidia.com/gpu: 1
      nodeSelector:
        nvidia.com/gpu.product: A100-SXM4-40GB-MIG-1g.5gb
    EOF    

Concurrent Job Launch
=======================

Now, let's try a more complex example. In this example, we will use Argo Workflows to launch concurrent 
jobs on MIG devices. In this example, the A100 has been configured into 2 MIG devices using the: ``3g.20gb`` profile.

First, `install <https://argo-workflows.readthedocs.io/en/latest/quick-start/#install-argo-workflows>`_ the Argo Workflows 
components into your Kubernetes cluster. 

.. code-block:: console

    $ kubectl create ns argo \
        && kubectl apply -n argo \
        -f https://raw.githubusercontent.com/argoproj/argo-workflows/stable/manifests/quick-start-postgres.yaml

Next, download the latest Argo CLI from the `releases page <https://github.com/argoproj/argo-workflows/releases>`_ and 
follow the instructions to install the binary.        

Now, we will craft an Argo example that launches multiple CUDA containers onto the MIG devices on the GPU. 
We will reuse the same ``vectorAdd`` example from before. Here is the job description, saved as ``vector-add.yaml``:

.. code-block:: yaml

    $ cat << EOF > vector-add.yaml
    apiVersion: argoproj.io/v1alpha1
    kind: Workflow
    metadata:
    generateName: argo-mig-example-
    spec:
    entrypoint: argo-mig-result-example
    templates:
    - name: argo-mig-result-example
        steps:
        - - name: generate
            template: gen-mig-device-list
        # Iterate over the list of numbers generated by the generate step above
        - - name: argo-mig
            template: argo-mig
            arguments:
            parameters:
            - name: argo-mig
                value: "{{item}}"
            withParam: "{{steps.generate.outputs.result}}"

    # Generate a list of numbers in JSON format
    - name: gen-mig-device-list
        script:
        image: python:alpine3.6
        command: [python]
        source: |
            import json
            import sys
            json.dump([i for i in range(0, 2)], sys.stdout)

    - name: argo-mig
        retryStrategy:
        limit: 10
        retryPolicy: "Always"
        inputs:
        parameters:
        - name: argo-mig
        container:
        image: nvidia/samples:vectoradd-cuda11.2.1
        resources:
            limits:
            nvidia.com/gpu: 1
        nodeSelector:
        nvidia.com/gpu.product: A100-SXM4-40GB-MIG-3g.20gb
    EOF


Launch the workflow:

.. code-block:: console

    $ argo submit -n argo --watch vector-add.yaml

Argo will print out the pods that have been launched:

.. code-block:: console

    Name:                argo-mig-example-z6mqd
    Namespace:           argo
    ServiceAccount:      default
    Status:              Succeeded
    Conditions:
    Completed           True
    Created:             Wed Mar 24 14:44:51 -0700 (20 seconds ago)
    Started:             Wed Mar 24 14:44:51 -0700 (20 seconds ago)
    Finished:            Wed Mar 24 14:45:11 -0700 (now)
    Duration:            20 seconds
    Progress:            3/3
    ResourcesDuration:   9s*(1 cpu),9s*(100Mi memory),1s*(1 nvidia.com/gpu)

    STEP                       TEMPLATE                 PODNAME                           DURATION  MESSAGE
    ✔ argo-mig-example-z6mqd  argo-mig-result-example
    ├───✔ generate            gen-mig-device-list      argo-mig-example-z6mqd-562792713  8s
    └─┬─✔ argo-mig(0:0)(0)    argo-mig                 argo-mig-example-z6mqd-845918106  2s
    └─✔ argo-mig(1:1)(0)    argo-mig                 argo-mig-example-z6mqd-870679174  2s


If you observe the logs, you can see that the ``vector-add`` sample has completed on both devices:

.. code-block:: console

    $ argo logs -n argo @latest

.. code-block:: console

    argo-mig-example-z6mqd-562792713: [0, 1]
    argo-mig-example-z6mqd-870679174: [Vector addition of 50000 elements]
    argo-mig-example-z6mqd-870679174: Copy input data from the host memory to the CUDA device
    argo-mig-example-z6mqd-870679174: CUDA kernel launch with 196 blocks of 256 threads
    argo-mig-example-z6mqd-870679174: Copy output data from the CUDA device to the host memory
    argo-mig-example-z6mqd-870679174: Test PASSED
    argo-mig-example-z6mqd-870679174: Done
    argo-mig-example-z6mqd-845918106: [Vector addition of 50000 elements]
    argo-mig-example-z6mqd-845918106: Copy input data from the host memory to the CUDA device
    argo-mig-example-z6mqd-845918106: CUDA kernel launch with 196 blocks of 256 threads
    argo-mig-example-z6mqd-845918106: Copy output data from the CUDA device to the host memory
    argo-mig-example-z6mqd-845918106: Test PASSED
    argo-mig-example-z6mqd-845918106: Done

